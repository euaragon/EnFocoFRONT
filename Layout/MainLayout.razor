@using EnFocoFRONT.Services
@using EnFocoFRONT.Models
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject INewsletterService NewsletterService


<NavMenu />

<div class="container-fluid p-3">
    <main class="m-3 p-3">
        @Body
    </main>
</div>

<div class="mb-5"></div>

<footer class="border-top footer mt-5">
    <div class="container">
        <nav class=" navbar navbar-expand-sm navbar-toggleable-sm justify-content-between">
            <ul class="nav-footer navbar-nav flex organismos">
                <li class="nav-item p-1">
                    <a target="_blank" href="https://www.tribunaldecuentas.mendoza.gov.ar/">Tribunal de Cuentas</a>
                </li>

                <li class="nav-item p-1">
                    <a target="_blank" href="http://fiscalia.mendoza.gov.ar/">
                        Fiscalía de
                        Estado
                    </a>
                </li>

                <li class="nav-item p-1">
                    <a target="_blank" href="https://eticapublica.mendoza.gov.ar/">
                        Ética
                        Pública
                    </a>
                </li>
            </ul>

            <form class="newsletter" id="newsletterForm" onsubmit="return false;">
                <h6 class="text-light text-end">Suscribite a nuestro <br /> Newsletter</h6>
                <div class="input-group flex-wrap w-50">
                    <span class="input-group-text">&#64;</span>
                    <input type="email" @ref="_emailEntrada" class="form-control" />
                </div>
                <button type="button" class="btn naranja text-light rounded-2 mt-2" @onclick="OnSubmit"
                    disabled="@(!_jsReady)">Enviar</button>

            </form>
        </nav>

    </div>
</footer>

@code {
    private ElementReference _emailEntrada;

    private bool _jsReady = false;

   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("console.log", "MainLayout: JS inicializado");
            _jsReady = true;

            StateHasChanged();
        }
    }

    private async Task OnSubmit()
    {
        string email = await JS.InvokeAsync<string>("getInputValue", _emailEntrada);

        if (string.IsNullOrWhiteSpace(email))
        {
            await JS.InvokeVoidAsync("Swal.fire", "Error", "Por favor ingresá un email válido.", "error");
            return;
        }

        var confirm = await JS.InvokeAsync<bool>("SwalConfirm", email);

        if (!confirm)
            return;

        var newsletter = new Newsletter { Email = email };

        bool result = await NewsletterService.CreateAsync(newsletter);

        if (result)
        {
            await JS.InvokeVoidAsync("Swal.fire", "¡Listo!", "Suscripción exitosa.", "success");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", "Error", "Hubo un problema al suscribirse.", "error");
        }
    }
}