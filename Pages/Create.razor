@page "/crear-noticia"

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using System.Net.Http.Headers;
@using EnFocoFRONT.Models;
@using EnFocoFRONT.Helpers; 
@using EnFocoFRONT.Services
@inject IAppSettingsService AppSettingsService
@inject IAuthStateService AuthStateService
@inject NavigationManager NavigationManager

<h1 class="mt-5 mb-5">Crear Noticia</h1>
<form @onsubmit="HandleSubmit" class="mb-5">
    <div class="mb-3">
        <label for="title" class="form-label">Título</label>
        <input type="text" id="title" class="form-control" @bind="notice.Title" required />
    </div>

    <div class="mb-3">
        <label for="subtitle" class="form-label">Subtítulo</label>
        <input type="text" id="subtitle" class="form-control" @bind="notice.Subtitle" />
    </div>

    <div class="mb-3">
        <label for="issue" class="form-label">Tema</label>
        <input type="text" id="issue" class="form-control" @bind="notice.Issue" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Categoría</label>
        <select id="category" class="form-select" @bind="notice.Category">
            @foreach (var category in Categories)
            {
                <option value="@category.Key">@category.Value</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="section" class="form-label">Sección</label>
        <select id="section" class="form-select" @bind="notice.Section">
            @foreach (var sect in Sections)
            {
                <option value="@sect.Key">@sect.Value</option>
            }
        </select>
    </div>


    <div class="mb-3">
        <label for="image" class="form-label">Imagen</label>
        <InputFile OnChange="HandleImageUpload" />
        @if (!string.IsNullOrEmpty(PreviewImageUrl))
        {
            <img src="@PreviewImageUrl" alt="Vista previa" class="img-thumbnail mt-2" style="max-height: 200px;" />
        }
    </div>

    <div class="mb-3">
        <label for="Text" class="form-label">Texto</label>
        <textarea id="Text" class="form-control" @bind="notice.Text"></textarea>
        
        


    </div>

    <button type="submit" class="btn btn-primary">Guardar Noticia</button>
</form>

@code {
     protected Notice notice { get; set; } = new Notice();
        protected string? PreviewImageUrl { get; set; }
        private IBrowserFile? _selectedFile;

        protected Dictionary<int, string> Categories { get; set; } = new();
        protected Dictionary<int, string> Sections { get; set; } = new();

        [Inject] public IJSRuntime JSRuntime { get; set; } = default!;
        [Inject] protected HttpClient? Http { get; set; }
        [Inject] protected NavigationManager? Navigation { get; set; }




        private Dictionary<string, object> TinyMceConfig = new Dictionary<string, object>
            {
                { "plugins", "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code fullscreen insertdatetime media table paste help wordcount" },
                { "toolbar", "undo redo | formatselect | bold italic backcolor | " +
                            "alignleft aligncenter alignright alignjustify | " +
                            "bullist numlist outdent indent | removeformat | image | help" }, // Añadido 'image' al toolbar
                { "height", 500 },
                { "language", "es" },
                { "images_upload_url", "/api/uploadimage" }, // Reemplaza con la URL de tu endpoint de subida de imágenes
                { "images_upload_handler", "imageUploadHandler" } // Nombre de la función JavaScript para manejar la subida
            };


        protected override void OnInitialized()
        {
            if (!AuthStateService.IsAuthenticated)
                {
                    Navigation.NavigateTo($"{AppSettingsService.Settings?.BaseFront}login", forceLoad: true);
                    return;
                }
            Categories = Enum.GetValues(typeof(NoticeCategory))
                .Cast<NoticeCategory>()
                .ToDictionary(
                    e => (int)e,
                    e => ((Enum)(object)e).GetDisplayName()
                );

            Sections = Enum.GetValues(typeof(NoticeSection))
                .Cast<NoticeSection>()
                .ToDictionary(
                    e => (int)e,
                    e => ((Enum)(object)e).ToString()
                );
        }



         protected async Task HandleImageUpload(InputFileChangeEventArgs e)
        {
            var file = e.File;
            if (file != null)
            {
                _selectedFile = file;
                var buffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffer);
                string base64Image = Convert.ToBase64String(buffer);
                PreviewImageUrl = $"data:{file.ContentType};base64,{base64Image}";
                notice.Img = file.Name;
            }
            else
            {
                PreviewImageUrl = null;
                notice.Img = null;
                _selectedFile = null;
            }
        }



        protected async Task HandleValidSubmit()
        {
            notice.Text = await JSRuntime.InvokeAsync<string>("getTinyMceContent");

            if (_selectedFile == null)
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Imagen requerida", "Por favor seleccione una imagen.", "warning");
                return;
            }

            var content = new MultipartFormDataContent();
            content.Add(new StringContent(notice.Title), "Title");
            content.Add(new StringContent(notice.Subtitle ?? ""), "Subtitle");
            content.Add(new StringContent(notice.Issue ?? ""), "Issue");
            content.Add(new StringContent(notice.Text ?? ""), "Text");
            content.Add(new StringContent(notice.Category.ToString()), "Category");
            content.Add(new StringContent(notice.Section.ToString()), "Section");
            content.Add(new StringContent(notice.IsFeatured.ToString()), "IsFeatured");

            var fileContent = new StreamContent(_selectedFile.OpenReadStream(_selectedFile.Size));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(_selectedFile.ContentType);
            content.Add(fileContent, "ImageFile", _selectedFile.Name);


           

             try
    {
        var response = await Http.PostAsync("api/Notice", content);
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Éxito", "La noticia se ha guardado correctamente.", "success");
            Navigation?.NavigateTo($"{AppSettingsService.Settings?.BaseFront}/");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", $"No se pudo guardar la noticia: {errorMessage}", "error");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al enviar la noticia: {ex.Message}");
        await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", "Ocurrió un error al guardar la noticia.", "error");
    }
        }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initTinyMCE");
        }
    }

    private async Task HandleSubmit()
    {
        await HandleValidSubmit();
    }
}
